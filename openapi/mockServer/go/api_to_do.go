/*
 * ToDo API
 *
 * A simple ToDo API
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A ToDoApiController binds http requests to an api service and writes the service results to the http response
type ToDoApiController struct {
	service ToDoApiServicer
}

// NewToDoApiController creates a default api controller
func NewToDoApiController(s ToDoApiServicer) Router {
	return &ToDoApiController{ service: s }
}

// Routes returns all of the api route for the ToDoApiController
func (c *ToDoApiController) Routes() Routes {
	return Routes{ 
		{
			"TodosGet",
			strings.ToUpper("Get"),
			"/todos",
			c.TodosGet,
		},
		{
			"TodosIdDelete",
			strings.ToUpper("Delete"),
			"/todos/{id}",
			c.TodosIdDelete,
		},
		{
			"TodosIdGet",
			strings.ToUpper("Get"),
			"/todos/{id}",
			c.TodosIdGet,
		},
		{
			"TodosIdPut",
			strings.ToUpper("Put"),
			"/todos/{id}",
			c.TodosIdPut,
		},
		{
			"TodosPost",
			strings.ToUpper("Post"),
			"/todos",
			c.TodosPost,
		},
	}
}

// TodosGet - Get all ToDos
func (c *ToDoApiController) TodosGet(w http.ResponseWriter, r *http.Request) { 
	result, err := c.service.TodosGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// TodosIdDelete - Delete a ToDo by ID
func (c *ToDoApiController) TodosIdDelete(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id := params["id"]
	result, err := c.service.TodosIdDelete(id)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// TodosIdGet - Get a ToDo by ID
func (c *ToDoApiController) TodosIdGet(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id := params["id"]
	result, err := c.service.TodosIdGet(id)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// TodosIdPut - Update a ToDo by ID
func (c *ToDoApiController) TodosIdPut(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id := params["id"]
	todo := &Todo{}
	if err := json.NewDecoder(r.Body).Decode(&todo); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.TodosIdPut(id, *todo)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// TodosPost - Create a ToDo
func (c *ToDoApiController) TodosPost(w http.ResponseWriter, r *http.Request) { 
	todo := &Todo{}
	if err := json.NewDecoder(r.Body).Decode(&todo); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.TodosPost(*todo)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}
